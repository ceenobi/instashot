// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum NotificationType {
  POST_LIKE
  POST_COMMENT
  STORY_VIEW
  FOLLOW_USER
}

model User {
  id                       String    @id @default(cuid())
  googleId                 String?   @unique
  username                 String    @unique
  fullname                 String
  email                    String    @unique
  password                 String?
  isVerified               Boolean   @default(false)
  role                     Role      @default(USER)
  token                    String?
  tokenExpires             DateTime?
  verificationToken        String?
  verificationTokenExpires DateTime?
  lastLogin                DateTime  @default(now())
  profilePicture           String    @default("")
  profilePhotoId           String    @default("")
  bio                      String    @default("") @db.VarChar(150)
  followers                String[]
  following                String[]
  isPublic                 Boolean   @default(true)
  createdAt                DateTime  @default(now())
  updatedAt                DateTime  @updatedAt

  posts         Post[]    @relation("UserPosts") // Posts created by the user
  likedPosts    Post[]    @relation("PostLikes") // Posts liked by the user
  savedPosts    Post[]    @relation("PostSavedBy") // Posts saved by the user
  comments      Comment[]
  likedComments Comment[] @relation("CommentLikes")
  story         Story[]   @relation("UserStory")
  likedStories  Story[]   @relation("StoryLikes")
  viewers       Story[]   @relation("StoryViewers")
  notifications Notification[]
}

model Notification {
  id            String   @id @default(cuid())
  message       String
  type          NotificationType
  createdAt     DateTime @default(now())
  notificationId String @unique
  user          User     @relation(fields: [userId], references: [id])
  userId        String
}

model Post {
  id             String    @id @default(cuid())
  caption        String
  description    String
  media          String[]
  user           User      @relation("UserPosts", fields: [userId], references: [id])
  userId         String
  tags           String[]  @default([])
  likes          User[]    @relation("PostLikes")
  mediaPublicIds String[]
  isPublic       Boolean   @default(true)
  savedBy        User[]    @relation("PostSavedBy")
  comments       Comment[]
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  likes     User[]   @relation("CommentLikes")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Story {
  id             String   @id @default(cuid())
  caption        String   @db.Text
  media          String[]
  user           User     @relation("UserStory", fields: [userId], references: [id])
  userId         String   @map("user_id") @db.VarChar(36)
  storyLikes     User[]   @relation("StoryLikes")
  views          Int      @default(0)
  viewers        User[]   @relation("StoryViewers")
  mediaPublicIds String[] @db.VarChar(255)
  expiresAt      DateTime @default(dbgenerated("now() + interval '24 hours'"))
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@unique([id])
  @@index([userId])
  @@index([expiresAt])
  @@map("stories")
}
